// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // output   = "../node_modules/.prisma/client" // Recommended for explicit output path
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum для ролі в комісії зі списання
enum CommissionRole {
  none    // Не є членом комісії
  member  // Член комісії
  chair   // Голова комісії
}

model Employee {
  id             Int      @id @default(autoincrement())
  full_name      String
  position       String?
  contact_info   String?  // Можливо, додати @unique, якщо email має бути унікальним?
  is_active      Boolean  @default(true)
  is_responsible Boolean  @default(false) // Матеріально-відповідальна особа

  // --- Нові поля для ролей ---
  is_head_of_enterprise Boolean @default(false) // Голова підприємства (для підпису актів)
  is_chief_accountant   Boolean @default(false) // Головний бухгалтер (для підпису актів)
  commission_role       CommissionRole @default(none) // Роль в комісії зі списання

  created_at     DateTime @default(now())
  updated_at     DateTime? @updatedAt

  // Relations
  assetInstances AssetInstance[]          @relation("CurrentHolder")
  assignments    AssetAssignmentHistory[]
  // writeOffsDone WriteOffLog[] @relation("PerformedBy") // Якщо потрібно зв'язати списання з виконавцем
}

model AssetCategory {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  // Relations
  assetTypes AssetType[]
}

model AssetType {
  id                  Int       @id @default(autoincrement())
  name                String
  minimum_stock_level Int       // Мінімальна *загальна* кількість цього типу
  notes               String?
  created_at          DateTime  @default(now())
  updated_at          DateTime? @updatedAt

  categoryId          Int
  // Relations
  category            AssetCategory   @relation(fields: [categoryId], references: [id])
  assetInstances      AssetInstance[]
  writeOffLogs        WriteOffLog[]   // Зв'язок з логом списання
}

// Оновлений Enum для статусів активів
enum AssetStatus {
  on_stock    // На складі
  issued      // Видано активному співробітнику
  written_off // Списано (архів)
  in_repair   // В ремонті
  lost        // Втрачено
  reserved    // Зарезервовано
  damaged     // Пошкоджено
  unreturned  // Не повернуто звільненим співробітником
}

model AssetInstance {
  id                  Int       @id @default(autoincrement())
  inventoryNumber     String    // Не унікальний
  unit_cost           Decimal   @db.Decimal(10, 2)
  purchase_date       DateTime
  status              AssetStatus @default(on_stock)
  notes               String?
  quantity            Int       @default(1) // Кількість одиниць у цьому записі
  created_at          DateTime  @default(now())
  updated_at          DateTime? @updatedAt

  assetTypeId         Int
  current_employee_id Int?

  // Relations
  assetType           AssetType  @relation(fields: [assetTypeId], references: [id])
  currentEmployee     Employee?  @relation("CurrentHolder", fields: [current_employee_id], references: [id])
  assignmentHistory   AssetAssignmentHistory[]
}

model AssetAssignmentHistory {
  id                  Int       @id @default(autoincrement())
  asset_instance_id   Int       // Посилання на конкретний AssetInstance (зазвичай з quantity=1)
  employee_id         Int
  assignment_date     DateTime  @default(now())
  return_date         DateTime?
  // return_status String? // Можна додати статус повернення

  // Relations
  assetInstance       AssetInstance @relation(fields: [asset_instance_id], references: [id])
  employee            Employee      @relation(fields: [employee_id], references: [id])
}

// Нова модель для логування списань
model WriteOffLog {
  id            Int       @id @default(autoincrement())
  assetTypeId   Int       // Який тип активу списано
  quantity      Int       // Скільки одиниць списано
  writeOffDate  DateTime  @default(now()) // Дата списання
  reason        String?   // Причина списання (опціонально)
  // performedById Int?   // Опціонально: ID співробітника, що виконав/затвердив
  // performedBy   Employee? @relation("PerformedBy", fields: [performedById], references: [id])

  // Relation to AssetType
  assetType     AssetType @relation(fields: [assetTypeId], references: [id])

  @@index([assetTypeId])
  @@index([writeOffDate])
}

